worker_processes 1;

events {
  worker_connections 128;
}

env CLIENT_ID;
env CLIENT_SECRET;
env PROXY_PASS_URI;

http {

  lua_package_path '~/lua/?.lua;;';

  resolver 8.8.8.8;

  # cache for JWT verification results
  lua_shared_dict introspection 10m;
  # cache for jwks metadata documents
  lua_shared_dict discovery 1m;

  error_log /dev/stdout debug;

  server {
    listen 9000;

    set $session_check_ssi off;
    set $session_check_ua          off;
    set $session_check_scheme      off;
    set $session_check_addr        off;
    set $session_secret 623q4hR325t36VsCD3g567922IC0073T;
    set $session_cipher none;

    set_by_lua $proxy_uri 'return os.getenv("PROXY_PASS_URI")';

    location / {

      access_by_lua '
        local opts = {
          client_id = os.getenv("CLIENT_ID"),
          client_secret = os.getenv("CLIENT_SECRET"),
          redirect_uri_path = "/oauth2/callback",
          ssl_verify = "no",
          discovery = "https://accounts.google.com/.well-known/openid-configuration",
        }

        local res, err, _target, session = require("resty.openidc").authenticate(opts)

        ngx.log(ngx.DEBUG, tostring(res))
        ngx.log(ngx.DEBUG, tostring(err))

        if err or not res then
          ngx.status = 403
          ngx.say("forbidden")
          ngx.exit(ngx.HTTP_FORBIDDEN)
        end

        ngx.log(ngx.DEBUG, "Authentication successful, setting Auth header...")
        ngx.req.set_header("Authorization", "Bearer "..session.data.enc_id_token)
        ngx.log(ngx.DEBUG, "Authentication successful, proxy passing...")
      ';

      proxy_pass $proxy_uri;
    }
  }
}
